{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAK/B,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAuBb,SAASO,GAAQR,SAAEA,EAAQC,MAAEA,IAC3BR,EAAAgB,OAAOC,QAAQ,sBAAoBV,QAAiBC,M,CAGtD,SAASU,GAAUX,SAAEA,EAAQC,MAAEA,IAC7BR,EAAAgB,OAAOG,QAAQ,uBAAqBZ,QAAiBC,M,CAvCvDN,EAAKC,KAAKiB,iBAAiB,UAe3B,SAA0BC,GACxBA,EAAEC,iBACF,MAAMC,EAAW,IAAIC,SAASH,EAAEI,eAC1BC,EAAa,GAEnB,IAAK,MAAOC,EAAKC,KAAUL,EAASM,UAClCH,EAAWC,GAAOG,OAAOF,GAG3B,IAAIG,OAAEA,EAAMC,KAAEA,EAAIxB,MAAEA,GAAUkB,EAE9B,IAAK,IAAIO,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCzB,GAASwB,EACT1B,EAAc2B,EAAGzB,GAAO0B,KAAKhB,GAAWiB,MAAMpB,GAE9Cb,EAAKC,KAAKiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onCreatePromises);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onCreatePromises(e) {\n  e.preventDefault();\n  const formData = new FormData(e.currentTarget);\n  const dataParams = {};\n\n  for (const [key, value] of formData.entries()) {\n    dataParams[key] = Number(value);\n  }\n\n  let { amount, step, delay } = dataParams;\n\n  for (let i = 1; i <= amount; i += 1) {\n    delay += step;\n    createPromise(i, delay).then(onSuccess).catch(onError);\n\n    refs.form.reset();\n  }\n}\n\nfunction onError({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction onSuccess({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// // імпортуємо бібліотеку для роботи з кастомними відображеннями повідомлень console.log()\n// // для користувача\n\n// const formRef = document.querySelector('.form');\n// // створюємо змінну, якій присвоюємо посилання до елементу html form\n// // console.log('formRef', formRef);\n\n// formRef.addEventListener('submit', promiseMaker);\n// // закріплюємо на форму слухача подій submit, під час яких викликається\n// // виконання колбек-функції promiseMaker\n\n// function promiseMaker(event) {\n//   // функція приймає подію\n//   event.preventDefault();\n//   //щоподії скидуються дефолтні налаштування браузера і сторінка не перезавантажується\n//   let delay = Number(this.delay.value);\n//   let step = Number(this.step.value);\n//   let amount = Number(this.amount.value);\n//   // створюємо три змінні, що відповідають числовим значенням трьох інпутів форми\n//   let count = 0;\n//   // створюємо змінну лічильника створених промісів із нульовим початковим значенням\n//   let difference = delay - step;\n//   // створюємо змінну різниці між першим ділеєм і наступник кроком\n//   const makeCount = setInterval(() => {\n//     count += 1;\n//     difference += step;\n//     // створюємо функцію, якій задаємо часовий інтервал, який\n//     // щопокроково змінюється до різниці часу додається крок часу.\n//     // Також до лічильника створених промісів щоразу додається один\n\n//     createPromise(count, difference).then(showSucces).catch(showError);\n//     // викликаємо колбек-функцію createPromise зі створення промісів,\n//     // шляхом рандомної генерації чисел і виконання умови.\n//     // Функція в себе приймає значення count та різниці в кроках difference.\n//     // методом .then(), тобто коли відбувається вдала генерація промісу\n//     // то відображує колбек-функцію showSucces і навпаки при невдалому\n//     // методом .catch() колбек-функцію showError\n\n//     if (count === amount) {\n//       // коли кількість створених промісів суворо дорівнюватиме введеній кількості для генерації, то\n//       clearInterval(makeCount);\n//       // стерти часовий інтервал\n//     }\n//   }, step);\n// }\n\n// function createPromise(position, delay) {\n//   // колбек, яка приймає поточну позицію та часовий інтервал\n//   const shouldResolve = Math.random() > 0.3;\n//   // змінна, що рандомно генерує число до 1 і виконується чи ні умова\n//   return new Promise((resolve, reject) => {\n//     // повертається новий проміс або вдало створений, або не створений\n//     setTimeout(() => {\n//       // встановлюється час за який запуститься виконання показу повідомлення про результат\n//       if (shouldResolve) {\n//         // якщо умова рандому виконана\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         // отримуємо resolve і показуємо повідомлення про створення промісу,\n//         // де вказуємо номер промісу і час, який знадобився\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//         // отримуємо reject і показуємо повідомлення про не створення промісу,\n//         // де вказуємо номер промісу і час, який знадобився\n//       }\n//     }, delay);\n//   });\n// }\n\n// function showSucces(value) {\n//   Notify.success(value);\n// }\n// function showError(error) {\n//   Notify.failure(error);\n// }\n// // створюємо дві колбек-функції, що при відображатимуть сповіщення console.log()\n// // для користувача під час створення промісу чи помилки створення"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$onError","Notify","failure","$47d4ff9957288465$var$onSuccess","success","addEventListener","e","preventDefault","formData","FormData","currentTarget","dataParams","key","value","entries","Number","amount","step","i","then","catch","reset"],"version":3,"file":"03-promises.35309893.js.map"}